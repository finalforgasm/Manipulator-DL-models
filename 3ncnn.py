# -*- coding: utf-8 -*-
"""3Ncnn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l2kuv08Z0gpo3cFQilqVS0BsEgXEYskv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error
from math import sqrt

# Load dataset
df = pd.read_csv(r'/content/dataset_with_constraints_no6_3WRIST_15K.csv', encoding='utf8')
df = df.drop(['Unnamed: 0'], axis=1)

# Number of features and output angles
size = 12  # Number of input features
angles = 3  # Output angles (theta1, theta2, theta3)

# Data Preprocessing
scaler = MinMaxScaler(feature_range=(-1, 1))
X = scaler.fit_transform(df.iloc[:, :size])
y = scaler.fit_transform(df.iloc[:, size:])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

# Reshape data for CNN
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# CNN Model
model = Sequential()
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], 1)))
model.add(MaxPooling1D(pool_size=2))
model.add(Conv1D(filters=128, kernel_size=3, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(angles, activation='linear'))

model.compile(loss='mae', optimizer='adam', metrics=['accuracy'])

# Training
callbacks = [EarlyStopping(monitor='val_loss', patience=10)]
model_f = model.fit(X_train, y_train, validation_split=0.2, epochs=20, callbacks=callbacks)

# Predictions
y_pred = model.predict(X_test)

# Performance Metrics
y_pred = scaler.inverse_transform(y_pred)
y_test = scaler.inverse_transform(y_test)

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
print("MSE:", mse)
print("MAE:", mae)

# Plot Loss
plt.plot(model_f.history['loss'], label='Train Loss')
plt.plot(model_f.history['val_loss'], label='Validation Loss')
plt.legend()
plt.title('Loss Curve')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.show()